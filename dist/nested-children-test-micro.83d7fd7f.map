{"version":3,"sources":["../src/lib/directive.ts","../src/lib/dom.ts","../src/lib/part.ts","../src/lib/template.ts","../src/lib/template-instance.ts","../src/lib/template-result.ts","../src/lib/parts.ts","../src/lib/default-template-processor.ts","../src/lib/template-factory.ts","../src/lib/render.ts","src/lit-html.ts","../../lib/haunted-builds/index-w-microtask.js","../nested-children-test/recursive-child-micro.ts","../nested-children-test/nested-children-test-micro.ts"],"names":["current","symbolFor","Symbol","for","str","phaseSymbol","hookSymbol","updateSymbol","commitSymbol","effectsSymbol","contextSymbol","contextEvent","currentId","setCurrent","element","clear","notify","id","defer","Promise","resolve","then","bind","setTimeout","scheduler","tasks","runTasks","t","i","len","length","task","push","read","write","Container","renderer","frag","host","Map","_updateQueued","result","handlePhase","phase","arg","commit","render","runEffects","args","apply","call","symbol","effects","forEach","hook","teardown","toCamelCase","val","indexOf","toLowerCase","split","reduce","out","part","charAt","toUpperCase","slice","component","BaseElement","HTMLElement","options","useShadowDOM","Element","_container","attachShadow","mode","shadowRoot","observedAttributes","update","name","_","newValue","Reflect","set","proto","Proxy","prototype","target","key","value","receiver","desc","enumerable","configurable","writable","reflectiveProp","initialValue","Object","freeze","get","defineProperty","setPrototypeOf","Hook","el","use","hooks","useMemo","fn","values","hasChanged","some","useCallback","inputs","setEffects","cb","useEffect","callback","lastValues","run","_teardown","useState","updater","makeArgs","useReducer","initialState","dispatch","state","reducer","action","DirectiveContainer","virtual","setValue","map","WeakMap","withHooks","factory","cont","setContexts","consumer","useContext","_updater","Context","Error","_subscribe","detail","dispatchEvent","CustomEvent","bubbles","cancelable","composed","unsubscribe","defaultValue","_unsubscribe","createContext","Provider","listeners","eventHandler","event","index","splice","stopPropagation","addEventListener","removeEventListener","_value","Consumer","render$$1"],"mappings":";AAuDO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,YAAA,QAAA,eAAA,EAnCP,MAAM,EAAa,IAAI,QA4BV,EAAyC,GACjD,IAAI,KACG,MAAA,EAAI,KAAK,GAER,OADP,EAAW,IAAI,GAAG,GACX,GAGN,QAAA,UAAA,EAAA,MAAM,EAAe,GACN,mBAAN,GAAoB,EAAW,IAAI,GAD5C,QAAA,YAAA;;ACHA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,YAAA,QAAA,cAAA,QAAA,kBAAA,EA3BA,MAAM,OAAyC,IAA1B,OAAO,qBAE3B,IADH,OAAO,eAAqC,0BA0B1C,QAAA,aAAA,EAjBA,MAAM,EACT,CAAC,EACA,EACA,EAAiB,KACjB,EAAoB,QACf,IAAA,EAAO,EACJ,KAAA,IAAS,GAAK,CACb,MAAA,EAAI,EAAM,YAChB,EAAU,aAAa,EAAO,GAC9B,EAAO,IAQR,QAAA,cAAA,EAAA,MAAM,EACT,CAAC,EAAiB,EAAsB,EAAqB,QAEnD,IAAA,EAAO,EACJ,KAAA,IAAS,GAAS,CACjB,MAAA,EAAI,EAAM,YAChB,EAAU,YAAY,GACtB,EAAO,IAPZ,QAAA,YAAA;;ACNA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,QAAA,cAAA,EALA,MAAM,EAAmB,GAKzB,QAAA,SAAA,EAAA,MAAM,EAAU,GAAhB,QAAA,QAAA;;ACqLA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,uBAAA,QAAA,aAAA,QAAA,qBAAA,QAAA,SAAA,QAAA,qBAAA,QAAA,YAAA,QAAA,WAAA,QAAA,YAAA,EA3MA,MAAM,WAAkB,OAAO,KAAK,UAAU,MAAM,OA2MpD,QAAA,OAAA,EArMA,MAAM,YAAoB,UAqM1B,QAAA,WAAA,EAnMA,MAAM,EAAc,IAAI,UAAU,KAAU,KAmM5C,QAAA,YAAA,EA9LA,MAAM,EAAuB,QA8L7B,QAAA,qBAAA,EAzLD,MAAO,EAIX,YAAY,EAAwB,GAHpC,KAAA,MAAwB,GAIjB,KAAA,QAAU,EACX,IAAA,GAAS,EACT,EAAY,EACV,MAAA,EAAwB,GACxB,EAAoB,IAClB,MAAA,EAAU,EAAS,QAGnB,EAAS,SAAS,iBACpB,EACA,IACA,MACA,GAIA,IAAA,EAAgB,EACb,KAAA,EAAO,YAAY,CACxB,IACM,MAAA,EAAO,EAAO,YAChB,GAAkB,IAAlB,EAAK,SAAwC,CAC1C,GAAA,EAAiB,gBAAiB,CAC/B,MAAA,EAAc,EAAiB,WAMjC,IAAA,EAAQ,EACP,IAAA,IAAI,EAAI,EAAG,EAAI,EAAW,OAAQ,IACjC,EAAW,GAAG,MAAM,QAAQ,IAAW,GACzC,IAGG,KAAA,KAAU,GAAG,CAGZ,MAAA,EAAgB,EAAO,QAAQ,GAE/B,EAAO,EAAuB,KAAK,GAAgB,GAMnD,EACF,EAAK,cAAgB,EAGnB,EADD,EAAiB,aAAa,GACJ,MAAM,GAChC,KAAA,MAAM,KAAK,CAAC,KAAM,YAAa,MAAA,EAAO,KAAA,EAAM,QAAA,IAChD,EAAiB,gBAAgB,GAClC,GAAa,EAAQ,OAAS,GAGA,aAA7B,EAAiB,SACpB,EAAiB,QAEd,GAAsB,IAAlB,EAAK,SAAqC,CAC7C,MAAA,EAAQ,EAAc,KACxB,GAAA,EAAK,QAAQ,IAAW,EAAG,CACvB,MAAA,EAAS,EAAK,WACd,EAAU,EAAK,MAAM,GACrB,EAAY,EAAQ,OAAS,EAG9B,IAAA,IAAI,EAAI,EAAG,EAAI,EAAW,IAC7B,EAAO,aACa,KAAf,EAAQ,GAAa,IACA,SAAS,eAAe,EAAQ,IACtD,GACC,KAAA,MAAM,KAAK,CAAC,KAAM,OAAQ,QAAS,IAIf,KAAvB,EAAQ,IACV,EAAO,aAAa,IAAgB,GACpC,EAAc,KAAK,IAElB,EAAc,KAAO,EAAQ,GAGhC,GAAa,QAEV,GAAsB,IAAlB,EAAK,SACT,GAAA,EAAiB,OAAS,EAAQ,CAC/B,MAAA,EAAS,EAAK,WAKS,OAAzB,EAAK,iBAA4B,IAAU,IAC7C,IACA,EAAO,aAAa,IAAgB,IAEtC,EAAgB,EACX,KAAA,MAAM,KAAK,CAAC,KAAM,OAAQ,MAAA,IAGN,OAArB,EAAK,YACN,EAAiB,KAAO,IAEzB,EAAc,KAAK,GACnB,KAEF,QACK,CACD,IAAA,GAAK,EACF,MACC,KADA,EAAK,EAAiB,KAAM,QAAQ,EAAQ,EAAI,KAMjD,KAAA,MAAM,KAAK,CAAC,KAAM,OAAQ,OAAQ,OAMjD,EAAiB,GAEZ,IAAA,MAAM,KAAK,EACd,EAAE,WAAY,YAAY,IAyDzB,QAAA,SAAA,EA/BA,MAAM,EAAwB,IAAuC,IAAhB,EAAK,MA+B1D,QAAA,qBAAA,EA3BA,MAAM,EAAe,IAAM,SAAS,cAAc,IA2BlD,QAAA,aAAA,EAAA,MAAM,EACT,8JADG,QAAA,uBAAA;;ACvMsB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,sBAAA,EAV7B,IAAA,EAAA,QAAA,YAIA,EAAA,QAAA,iBAMM,MAAO,EAMX,YACI,EAAoB,EACpB,GAPJ,KAAA,OAAgC,GAQzB,KAAA,SAAW,EACX,KAAA,UAAY,EACZ,KAAA,QAAU,EAGjB,OAAO,GACD,IAAA,EAAI,EACH,IAAA,MAAM,KAAQ,KAAK,YACT,IAAT,GACF,EAAK,SAAS,EAAO,IAEvB,IAEG,IAAA,MAAM,KAAQ,KAAK,YACT,IAAT,GACF,EAAK,SAKX,SAMQ,MAAA,EAAW,EACb,aAAA,KAAK,SAAS,QAAQ,QAAQ,WAAU,GACxC,SAAS,WAAW,KAAK,SAAS,QAAQ,SAAS,GAEjD,EAAQ,KAAK,SAAS,MACxB,IAAA,EAAY,EACZ,EAAY,EACV,MAAA,EAAoB,IAGlB,MAAA,EAAS,SAAS,iBACpB,EACA,IACA,MACA,GACA,IAAA,EAAO,EAAO,WAEX,KAAA,EAAY,EAAM,QAAmB,OAAT,GAAe,CAC1C,MAAA,EAAO,EAAM,GAOf,IAAC,EAAqB,EAAA,sBAAA,GAGnB,GAAI,IAAc,EAAK,MAAO,CAC/B,GAAc,SAAd,EAAK,KAAiB,CAClB,MAAA,EAAO,KAAK,UAAU,qBAAqB,KAAK,SACtD,EAAK,gBAAgB,EAAK,iBACrB,KAAA,OAAO,KAAK,QAEZ,KAAA,OAAO,QAAQ,KAAK,UAAU,2BAC/B,EAAiB,EAAK,KAAM,EAAK,QAAS,KAAK,UAErD,SAEA,IACsB,aAAlB,EAAK,UACP,EAAkB,EAA6B,SAEjD,EAAO,EAAO,gBAjBT,KAAA,OAAO,UAAK,GACjB,MAyBC,OALP,EAAiB,GACb,EAAJ,eACE,SAAS,UAAU,GACnB,eAAe,QAAQ,IAElB,GAvFkB,QAAA,iBAAA;;AC4DwB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,kBAAA,QAAA,oBAAA,EAtErD,IAAA,EAAA,QAAA,YAEA,EAAA,QAAA,iBAMM,MAAO,EAMX,YACI,EAA+B,EAAmB,EAClD,GACG,KAAA,QAAU,EACV,KAAA,OAAS,EACT,KAAA,KAAO,EACP,KAAA,UAAY,EAMnB,UACQ,MAAA,EAAW,KAAK,QAAQ,OAAS,EACnC,IAAA,EAAO,GACN,IAAA,IAAI,EAAI,EAAG,EAAI,EAAU,IAAK,CAC3B,MAAA,EAAI,KAAK,QAAQ,GAUjB,EAAQ,EAAuB,uBAAA,KAAK,GAKxC,GAJE,EAIM,EAAE,OAAO,EAAG,EAAM,OAAS,EAAM,GAAK,EAAM,GAChD,EADI,qBACmB,EAAM,GAAK,EADtC,OAKQ,EAAI,EAAZ,WAGG,OAAA,EAAO,KAAK,QAAQ,GAG7B,qBACQ,MAAA,EAAW,SAAS,cAAc,YAEjC,OADP,EAAS,UAAY,KAAK,UACnB,GAW0C,QAAA,eAAA,EAA/C,MAAO,UAA0B,EACrC,UACS,cAAQ,MAAM,kBAGvB,qBACQ,MAAA,EAAW,MAAM,qBACjB,EAAU,EAAS,QACnB,EAAa,EAAQ,WAGpB,OAFP,EAAQ,YAAY,IACN,EAAA,EAAA,eAAA,EAAS,EAAW,YAC3B,GAX0C,QAAA,kBAAA;;AC4ZrD,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,UAAA,QAAA,aAAA,QAAA,kBAAA,QAAA,qBAAA,QAAA,SAAA,QAAA,cAAA,QAAA,mBAAA,QAAA,iBAAA,EAleA,IAAA,EAAA,QAAA,kBACA,EAAA,QAAA,YACA,EAAA,QAAA,aAEA,EAAA,QAAA,0BACA,EAAA,QAAA,wBACA,EAAA,QAAA,iBAIO,MAAM,EAAe,GAEZ,OAAV,KACmB,iBAAV,GAAuC,mBAAV,GAqd5C,QAAA,YAAA,EA9cM,MAAO,EAOX,YAAY,EAAkB,EAAc,GAF5C,KAAA,OAAQ,EAGD,KAAA,QAAU,EACV,KAAA,KAAO,EACP,KAAA,QAAU,EACV,KAAA,MAAQ,GACR,IAAA,IAAI,EAAI,EAAG,EAAI,EAAQ,OAAS,EAAG,IACjC,KAAA,MAAM,GAAK,KAAK,cAOf,cACD,OAAA,IAAI,EAAc,MAGjB,YACF,MAAA,EAAU,KAAK,QACf,EAAI,EAAQ,OAAS,EACvB,IAAA,EAAO,GAEN,IAAA,IAAI,EAAI,EAAG,EAAI,EAAG,IAAK,CAC1B,GAAQ,EAAQ,GACV,MAAA,EAAO,KAAK,MAAM,GACpB,QAAS,IAAT,EAAoB,CAChB,MAAA,EAAI,EAAK,MACX,GAAK,MAAL,IACC,MAAM,QAAQ,IAED,iBAAN,GAAmB,EAAU,OAAO,WACzC,IAAA,MAAM,KAAK,EACd,GAAqB,iBAAN,EAAiB,EAAI,OAAO,QAG7C,GAAqB,iBAAN,EAAiB,EAAI,OAAO,IAM1C,OADP,GAAQ,EAAQ,GAIlB,SACM,KAAK,QACF,KAAA,OAAQ,EACR,KAAA,QAAQ,aAAa,KAAK,KAAM,KAAK,eAwZhD,QAAA,mBAAA,EAnZM,MAAO,EAIX,YAAY,GAFZ,KAAA,WAAiB,EAGV,KAAA,UAAY,EAGnB,SAAS,GACH,IAAU,EAAV,UAAwB,EAAY,IAAU,IAAU,KAAK,QAC1D,KAAA,MAAQ,GAIR,EAAY,EAAA,aAAA,KACV,KAAA,UAAU,OAAQ,IAK7B,SACS,MAAA,EAAY,EAAA,aAAA,KAAK,QAAQ,CACxB,MAAA,EAAY,KAAK,MAClB,KAAA,MAAQ,EAAb,SACA,EAAU,MAER,KAAK,QAAU,EAAnB,UAGK,KAAA,UAAU,UAsXnB,QAAA,cAAA,EAlXM,MAAO,EAOX,YAAY,GAHZ,KAAA,WAAiB,EACjB,KAAA,mBAAyB,EAGlB,KAAA,QAAU,EAQjB,WAAW,GACJ,KAAA,UAAY,EAAU,aAAY,EAAtB,EAAA,iBACZ,KAAA,QAAU,EAAU,aAAY,EAAtB,EAAA,iBAUjB,gBAAgB,GACT,KAAA,UAAY,EACZ,KAAA,QAAU,EAAI,YAQrB,eAAe,GACb,EAAK,QAAQ,KAAK,WAAY,EAA9B,EAAA,iBACA,EAAK,QAAQ,KAAK,SAAU,EAA5B,EAAA,iBAQF,gBAAgB,GACd,EAAI,QAAQ,KAAK,WAAY,EAA7B,EAAA,iBACK,KAAA,QAAU,EAAI,QACnB,EAAI,QAAU,KAAK,UAGrB,SAAS,GACF,KAAA,cAAgB,EAGvB,SACS,MAAA,EAAY,EAAA,aAAA,KAAK,gBAAgB,CAChC,MAAA,EAAY,KAAK,cAClB,KAAA,cAAgB,EAArB,SACA,EAAU,MAEN,MAAA,EAAQ,KAAK,cACf,IAAU,EAAd,WAGI,EAAY,GACV,IAAU,KAAK,OACZ,KAAA,YAAY,GAEV,aAAiB,EAArB,eACA,KAAA,sBAAsB,GAClB,aAAiB,KACrB,KAAA,YAAY,GAEf,MAAM,QAAQ,IAEb,EAAc,OAAO,UACnB,KAAA,gBAAgB,GACZ,IAAU,EAAd,SACA,KAAA,MAAQ,EAAb,QACK,KAAA,SAGA,KAAA,YAAY,IAIb,QAAQ,GACT,KAAA,QAAQ,WAAY,aAAa,EAAM,KAAK,SAG3C,YAAY,GACd,KAAK,QAAU,IAGd,KAAA,QACA,KAAA,QAAQ,GACR,KAAA,MAAQ,GAGP,YAAY,GACZ,MAAA,EAAO,KAAK,UAAU,YAC5B,EAAiB,MAAT,EAAgB,GAAK,EACzB,IAAS,KAAK,QAAQ,iBACJ,IAAlB,EAAK,SAIN,EAAc,KAAO,EAEjB,KAAA,YAAY,SAAS,eACL,iBAAV,EAAqB,EAAQ,OAAO,KAE5C,KAAA,MAAQ,EAGP,sBAAsB,GACtB,MAAA,EAAW,KAAK,QAAQ,gBAAgB,GAC1C,GAAA,KAAK,iBAAiB,EAAtB,kBACA,KAAK,MAAM,WAAa,EACrB,KAAA,MAAM,OAAO,EAAM,YACnB,CAKC,MAAA,EACF,IAAI,EAAJ,iBAAqB,EAAU,EAAM,UAAW,KAAK,SACnD,EAAW,EAAS,SAC1B,EAAS,OAAO,EAAM,QACjB,KAAA,YAAY,GACZ,KAAA,MAAQ,GAIT,gBAAgB,GAWjB,MAAM,QAAQ,KAAK,SACjB,KAAA,MAAQ,GACR,KAAA,SAKD,MAAA,EAAY,KAAK,MACnB,IACA,EADA,EAAY,EAGX,IAAA,MAAM,KAAQ,OAKA,KAHjB,EAAW,EAAU,MAInB,EAAW,IAAI,EAAS,KAAK,SAC7B,EAAU,KAAK,GACG,IAAd,EACF,EAAS,eAAe,MAExB,EAAS,gBAAgB,EAAU,EAAY,KAGnD,EAAS,SAAS,GAClB,EAAS,SACT,IAGE,EAAY,EAAU,SAExB,EAAU,OAAS,EACd,KAAA,MAAM,GAAY,EAAU,UAIrC,MAAM,EAAkB,KAAK,YAEvB,EAAA,EAAA,aAAA,KAAK,UAAU,WAAa,EAAU,YAAc,KAAK,UAsLjE,QAAA,SAAA,EA3KM,MAAO,EAOX,YAAY,EAAkB,EAAc,GACtC,GAJN,KAAA,WAAiB,EACjB,KAAA,mBAAyB,EAGA,IAAnB,EAAQ,QAA+B,KAAf,EAAQ,IAA4B,KAAf,EAAQ,GACjD,MAAA,IAAI,MACN,2DAED,KAAA,QAAU,EACV,KAAA,KAAO,EACP,KAAA,QAAU,EAGjB,SAAS,GACF,KAAA,cAAgB,EAGvB,SACS,MAAA,EAAY,EAAA,aAAA,KAAK,gBAAgB,CAChC,MAAA,EAAY,KAAK,cAClB,KAAA,cAAgB,EAArB,SACA,EAAU,MAER,GAAA,KAAK,gBAAkB,EAA3B,SACE,OAEI,MAAA,IAAU,KAAK,cACjB,KAAK,QAAU,IACb,EACG,KAAA,QAAQ,aAAa,KAAK,KAAM,IAEhC,KAAA,QAAQ,gBAAgB,KAAK,OAGjC,KAAA,MAAQ,EACR,KAAA,cAAgB,EAArB,UAoIJ,QAAA,qBAAA,EAvHM,MAAO,UAA0B,EAGrC,YAAY,EAAkB,EAAc,GACpC,MAAA,EAAS,EAAM,GAChB,KAAA,OACmB,IAAnB,EAAQ,QAA+B,KAAf,EAAQ,IAA4B,KAAf,EAAQ,GAGlD,cACD,OAAA,IAAI,EAAa,MAG1B,YACM,OAAA,KAAK,OACA,KAAK,MAAM,GAAG,MAEhB,MAAM,YAGf,SACM,KAAK,QACF,KAAA,OAAQ,EAEP,KAAA,QAAgB,KAAK,MAAQ,KAAK,cA+F9C,QAAA,kBAAA,EA1FM,MAAO,UAAqB,GA0FlC,QAAA,aAAA,EApFA,IAAI,GAAwB,EAE5B,IACQ,MAAA,EAAU,CACV,cAEK,OADP,GAAwB,GACjB,IAIX,OAAO,iBAAiB,OAAQ,EAAgB,GAEhD,OAAO,oBAAoB,OAAQ,EAAgB,GACnD,MAAO,IAMH,MAAO,EASX,YAAY,EAAkB,EAAmB,GALjD,KAAA,WAA2C,EAE3C,KAAA,mBAAmD,EAI5C,KAAA,QAAU,EACV,KAAA,UAAY,EACZ,KAAA,aAAe,EACf,KAAA,kBAAqB,CAAA,GAAM,KAAK,YAAY,IAGnD,SAAS,GACF,KAAA,cAAgB,EAGvB,SACS,MAAA,EAAY,EAAA,aAAA,KAAK,gBAAgB,CAChC,MAAA,EAAY,KAAK,cAClB,KAAA,cAAgB,EAArB,SACA,EAAU,MAER,GAAA,KAAK,gBAAkB,EAA3B,SACE,OAGI,MAAA,EAAc,KAAK,cACnB,EAAc,KAAK,MACnB,EAAsC,MAAf,GACV,MAAf,IACK,EAAY,UAAY,EAAY,SACpC,EAAY,OAAS,EAAY,MACjC,EAAY,UAAY,EAAY,SACvC,EACa,MAAf,IAAuC,MAAf,GAAuB,GAE/C,GACG,KAAA,QAAQ,oBACT,KAAK,UAAW,KAAK,kBAAmB,KAAK,UAE/C,IACG,KAAA,SAAW,EAAW,GACtB,KAAA,QAAQ,iBACT,KAAK,UAAW,KAAK,kBAAmB,KAAK,WAE9C,KAAA,MAAQ,EACR,KAAA,cAAgB,EAArB,SAGF,YAAY,GACgB,mBAAf,KAAK,MACT,KAAA,MAAM,KAAK,KAAK,cAAgB,KAAK,QAAS,GAE7C,KAAA,MAA8B,YAAY,IAQtD,QAAA,UAAA,EAAA,MAAM,EAAc,GAAyC,IACxD,EACI,CAAC,QAAS,EAAE,QAAS,QAAS,EAAE,QAAS,KAAM,EAAE,MACjD,EAAE;;ACzbJ,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,yBAAA,QAAA,8BAAA,EA3CP,IAAA,EAAA,QAAA,cAOM,MAAO,EAUX,2BACI,EAAkB,EAAc,EAChC,GACI,MAAA,EAAS,EAAK,GAChB,GAAW,MAAX,EAAgB,CAEX,OADU,IAAI,EAAJ,kBAAsB,EAAS,EAAK,MAAM,GAAI,GAC/C,MAEd,MAAW,MAAX,EACK,CAAC,IAAI,EAAJ,UAAc,EAAS,EAAK,MAAM,GAAI,EAAQ,eAEzC,MAAX,EACK,CAAC,IAAI,EAAJ,qBAAyB,EAAS,EAAK,MAAM,GAAI,IAE1C,IAAI,EAAJ,mBAAuB,EAAS,EAAM,GACvC,MAMlB,qBAAqB,GACZ,OAAA,IAAI,EAAJ,SAAa,IAIjB,QAAA,yBAAA,EAAA,MAAM,EAA2B,IAAI,EAArC,QAAA,yBAAA;;ACiCA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,gBAAA,EAAA,QAAA,oBAAA,EA5EP,IAAA,EAAA,QAAA,iBA4BM,SAAU,EAAgB,GAC1B,IAAA,EAAgB,EAAe,IAAI,EAAO,WACxB,IAAlB,IACF,EAAgB,CACd,aAAc,IAAI,QAClB,UAAW,IAAI,KAEjB,EAAe,IAAI,EAAO,KAAM,IAG9B,IAAA,EAAW,EAAc,aAAa,IAAI,EAAO,SACjD,QAAa,IAAb,EACK,OAAA,EAKH,MAAA,EAAM,EAAO,QAAQ,KAAK,EAApB,QAaL,YATU,KADjB,EAAW,EAAc,UAAU,IAAI,MAGrC,EAAW,IAAI,EAAJ,SAAa,EAAQ,EAAO,sBAEvC,EAAc,UAAU,IAAI,EAAK,IAInC,EAAc,aAAa,IAAI,EAAO,QAAS,GACxC,EAkBF,MAAM,EAAiB,IAAI,IAA3B,QAAA,eAAA;;ACtDA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,OAAA,QAAA,WAAA,EAvBP,IAAA,EAAA,QAAA,YACA,EAAA,QAAA,cAEA,EAAA,QAAA,yBAGO,MAAM,EAAQ,IAAI,QAiBlB,QAAA,MAAA,EAAA,MAAM,EACT,CAAC,EACA,EACA,KACK,IAAA,EAAO,EAAM,IAAI,QACR,IAAT,KACU,EAAA,EAAA,aAAA,EAAW,EAAU,YACjC,EAAM,IAAI,EAAW,EAAO,IAAI,EAAJ,SAAY,OAAA,OAAA,CACjB,gBAAA,EAAA,iBACG,KAE1B,EAAK,WAAW,IAElB,EAAK,SAAS,GACd,EAAK,UAdJ,QAAA,OAAA;;AC8BA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,OAAA,eAAA,QAAA,2BAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,4BAAA,OAAA,eAAA,QAAA,2BAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,4BAAA,OAAA,eAAA,QAAA,oBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,qBAAA,OAAA,eAAA,QAAA,iBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,kBAAA,OAAA,eAAA,QAAA,YAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,aAAA,OAAA,eAAA,QAAA,cAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,eAAA,OAAA,eAAA,QAAA,cAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,eAAA,OAAA,eAAA,QAAA,gBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,iBAAA,OAAA,eAAA,QAAA,WAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,YAAA,OAAA,eAAA,QAAA,UAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,WAAA,OAAA,eAAA,QAAA,qBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,sBAAA,OAAA,eAAA,QAAA,gBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,iBAAA,OAAA,eAAA,QAAA,uBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,wBAAA,OAAA,eAAA,QAAA,YAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,aAAA,OAAA,eAAA,QAAA,cAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,eAAA,OAAA,eAAA,QAAA,WAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,YAAA,OAAA,eAAA,QAAA,oBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,qBAAA,OAAA,eAAA,QAAA,eAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,gBAAA,OAAA,eAAA,QAAA,QAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,SAAA,OAAA,eAAA,QAAA,SAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,UAAA,OAAA,eAAA,QAAA,iBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,kBAAA,OAAA,eAAA,QAAA,kBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,mBAAA,OAAA,eAAA,QAAA,mBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,oBAAA,OAAA,eAAA,QAAA,eAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,gBAAA,OAAA,eAAA,QAAA,uBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,wBAAA,OAAA,eAAA,QAAA,WAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,YAAA,QAAA,IAAA,QAAA,UAAA,EAvCP,IAAA,EAAA,QAAA,uCACA,EAAA,QAAA,4BAGA,EAAA,QAAA,sBAEA,EAAA,QAAA,gBACA,EAAA,QAAA,iBACA,EAAA,QAAA,kBAEA,EAAA,QAAA,mBACA,EAAA,QAAA,6BACA,EAAA,QAAA,8BAGA,EAAA,QAAA,sBAWC,OAAM,kBAAwB,OAAM,gBAAsB,KAAK,KAAK,SAM9D,MAAM,EAAO,CAAC,KAAkC,IACnD,IAAI,EAAJ,eAAmB,EAAS,EAAQ,OAAQ,EAA5C,0BAMG,QAAA,KAAA,EAAA,MAAM,EAAM,CAAC,KAAkC,IAClD,IAAI,EAAJ,kBAAsB,EAAS,EAAQ,MAAO,EAA9C,0BADG,QAAA,IAAA;;AC8WP,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,UAAA,EAAA,QAAA,QAAA,QAAA,UAAA,EAAA,QAAA,KAAA,EAAA,OAAA,eAAA,QAAA,OAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,QAAA,OAAA,eAAA,QAAA,SAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,UAAA,QAAA,KAAA,QAAA,cAAA,QAAA,WAAA,QAAA,QAAA,QAAA,WAAA,QAAA,SAAA,QAAA,UAAA,QAAA,iBAAA,EArbA,IAAA,EAAA,QAAA,YAqbA,SAAA,EAAA,GAAA,IAAA,EAAA,mBAAA,IAAA,IAAA,SAAA,EAAA,OAAA,EAAA,SAAA,GAAA,GAAA,OAAA,IAAA,EAAA,GAAA,OAAA,EAAA,GAAA,mBAAA,EAAA,MAAA,IAAA,UAAA,sDAAA,QAAA,IAAA,EAAA,CAAA,GAAA,EAAA,IAAA,GAAA,OAAA,EAAA,IAAA,GAAA,EAAA,IAAA,EAAA,GAAA,SAAA,IAAA,OAAA,EAAA,EAAA,UAAA,EAAA,MAAA,aAAA,OAAA,EAAA,UAAA,OAAA,OAAA,EAAA,UAAA,CAAA,YAAA,CAAA,MAAA,EAAA,YAAA,EAAA,UAAA,EAAA,cAAA,KAAA,EAAA,EAAA,KAAA,GAAA,SAAA,EAAA,GAAA,OAAA,IAAA,SAAA,SAAA,KAAA,GAAA,QAAA,iBAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wDAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAAA,IAAA,IAAA,EAAA,EAAA,EAAA,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,QAAA,EAAA,KAAA,EAAA,QAAA,GAAA,EAAA,SAAA,GAAA,GAAA,IAAA,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,SAAA,IAAA,GAAA,oBAAA,UAAA,QAAA,UAAA,OAAA,EAAA,GAAA,QAAA,UAAA,KAAA,OAAA,EAAA,GAAA,mBAAA,MAAA,OAAA,EAAA,IAAA,OAAA,KAAA,UAAA,SAAA,KAAA,QAAA,UAAA,KAAA,GAAA,gBAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,EAAA,IAAA,QAAA,UAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,CAAA,MAAA,EAAA,KAAA,MAAA,EAAA,GAAA,IAAA,EAAA,IAAA,SAAA,KAAA,MAAA,EAAA,IAAA,OAAA,GAAA,EAAA,EAAA,EAAA,WAAA,IAAA,MAAA,KAAA,WAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,SAAA,EAAA,EAAA,GAAA,OAAA,GAAA,WAAA,EAAA,IAAA,mBAAA,EAAA,EAAA,GAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,eAAA,OAAA,eAAA,SAAA,GAAA,OAAA,EAAA,WAAA,OAAA,eAAA,KAAA,GAAA,SAAA,EAAA,GAAA,QAAA,IAAA,EAAA,MAAA,IAAA,eAAA,6DAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,GAAA,mBAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,sDAAA,EAAA,UAAA,OAAA,OAAA,GAAA,EAAA,UAAA,CAAA,YAAA,CAAA,MAAA,EAAA,UAAA,EAAA,cAAA,KAAA,GAAA,EAAA,EAAA,GAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,SAAA,EAAA,GAAA,OAAA,EAAA,UAAA,EAAA,IAAA,EAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAlbA,IAYIA,EAZEC,EAA8B,mBAAXC,OAAwBA,OAAOC,IAAM,SAAAC,GAAOA,OAAAA,GAE/DC,EAAcJ,EAAU,iBACxBK,EAAaL,EAAU,gBAEvBM,EAAeN,EAAU,kBACzBO,EAAeP,EAAU,kBACzBQ,EAAgBR,EAAU,mBAC1BS,EAAgBT,EAAU,mBAE1BU,EAAe,kBAGjBC,EAAY,EAEhB,SAASC,EAAWC,GAClBd,EAAUc,EAGZ,SAASC,IACPf,EAAU,KACVY,EAAY,EAGd,SAASI,IACHC,IAAAA,EAAKL,EAEFK,OADPL,IACOK,EAGT,IAAMC,EAAwB,mBAATC,QAAsBA,QAAQC,UAAUC,KAAKC,KAAKH,QAAQC,WAAaG,WAE5F,SAASC,IACHC,IACAR,EADAQ,EAAQ,GAGHC,SAAAA,IACPT,EAAK,KACDU,IAAAA,EAAIF,EACRA,EAAQ,GACJ,IAAA,IAAIG,EAAI,EAAGC,EAAMF,EAAEG,OAAQF,EAAIC,EAAKD,IACtCD,EAAEC,KAIC,OAAA,SAASG,GACdN,EAAMO,KAAKD,GACF,MAANd,IACDA,EAAKC,EAAMQ,KAKjB,IAAMO,EAAOT,IACPU,EAAQV,IAERW,EA0XN,WAzXcC,SAAAA,EAAAA,EAAUC,EAAMC,GAAM,EAAA,KAAA,GAC3BF,KAAAA,SAAWA,EACXC,KAAAA,KAAOA,EACPC,KAAAA,KAAOA,GAAQD,EACf/B,KAAAA,GAAc,IAAIiC,IAClBlC,KAAAA,GAAe,KACfmC,KAAAA,eAAgB,EAmXzB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,SAhXW,MAAA,WAAA,IAAA,EAAA,KACJ,KAAKA,gBACRP,EAAK,WACCQ,IAAAA,EAAS,EAAKC,YAAYnC,GAC9B2B,EAAM,WACJ,EAAKQ,YAAYlC,EAAciC,GAE5B,EAAKhC,IACNyB,EAAM,WACJ,EAAKQ,YAAYjC,OAIvB,EAAK+B,eAAgB,IAElBA,KAAAA,eAAgB,KAiWzB,CAAA,IAAA,cA9VcG,MAAAA,SAAAA,EAAOC,GAEVD,OADFtC,KAAAA,GAAesC,EACbA,GACAnC,KAAAA,EAAqB,OAAA,KAAKqC,OAAOD,GACjCrC,KAAAA,EAAqB,OAAA,KAAKuC,SAC1BrC,KAAAA,EAAsB,OAAA,KAAKsC,WAAWtC,GAExCJ,KAAAA,GAAe,OAuVxB,CAAA,IAAA,SApVSoC,MAAAA,SAAAA,IACEA,EAAAA,EAAAA,QAAAA,EAAQ,KAAKJ,MACfU,KAAAA,WAAWvC,KAkVpB,CAAA,IAAA,SA/UW,MAAA,WACPK,EAAW,MACP4B,IAAAA,EAAS,KAAKO,KAChB,KAAKZ,SAASa,MAAM,KAAKX,KAAM,KAAKU,MACpC,KAAKZ,SAASc,KAAK,KAAKZ,KAAM,KAAKA,MAE9BG,OADP1B,IACO0B,IAyUX,CAAA,IAAA,aAtUaU,MAAAA,SAAAA,GACLC,IAAAA,EAAU,KAAKD,GAChBC,GAAAA,EAAS,CACVvC,EAAW,MADD,IAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAEQuC,IAAAA,IAAS,EAATA,EAAAA,EAAS,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,MAAA,GAAA,EAAA,CAAA,EAAA,MAClBF,KAAK,OAHJ,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,GAKVnC,OA+TN,CAAA,IAAA,WA3Ta,MAAA,WACG,KAAKT,GACX+C,QAAQ,SAACC,GACgB,mBAAlBA,EAAKC,UACdD,EAAKC,iBAuTb,EAAA,GAjTA,SAASC,IAAYC,IAAAA,EAAM,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAClBA,OAAsB,IAAtBA,EAAIC,QAAQ,KAAcD,EAAIE,cAAgBF,EAAIE,cAAcC,MAAM,KAAKC,OAAO,SAACC,EAAKC,GACtFD,OAAAA,EAAMA,EAAMC,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,GAAKH,GAClE,IAGJ,SAASI,EAAU/B,GAAUgC,IAAAA,EAAcC,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAAA,YAAaC,EAAU,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,CAACC,cAAc,GACzEC,EADgF,SAAA,GAMtE,SAAA,IAAA,IAAA,EAAA,OAAA,EAAA,KAAA,GACZ,EAAA,EAAA,KAAA,EAAA,GAAA,KAAA,QAC6B,IAAzBF,EAAQC,aACLE,EAAAA,WAAa,IAAItC,EAAUC,EAAhC,EAAA,KAEKsC,EAAAA,aAAa,CAAEC,KAAM,SACrBF,EAAAA,WAAa,IAAItC,EAAUC,EAAU,EAAKwC,WAA/C,EAAA,KANU,EANsE,OAAA,EAAA,EAChER,GADgE,EAAA,EAAA,KAAA,CAAA,CAAA,IAAA,qBAEpD,IAAA,WACvBhC,OAAAA,EAASyC,oBAAsB,OAH4C,EAAA,EAAA,CAAA,CAAA,IAAA,oBAgBhE,MAAA,WACbJ,KAAAA,WAAWK,WAjBkE,CAAA,IAAA,uBAoB7D,MAAA,WAChBL,KAAAA,WAAWlB,aArBkE,CAAA,IAAA,2BAwB3DwB,MAAAA,SAAAA,EAAMC,EAAGC,GAC5BxB,IAAAA,EAAmB,KAAbwB,GAAyBA,EACnCC,QAAQC,IAAI,KAAM3B,EAAYuB,GAAOtB,OA1B6C,EAAA,GA4ChF2B,IAAAA,EAAQ,IAAIC,MAAMjB,EAAYkB,UAAW,CAC7CH,IAAII,SAAAA,EAAQC,EAAKC,EAAOC,GAIlBC,IAAAA,EAiBG,OApBJH,KAAOD,GACRL,QAAQC,IAAII,EAAQC,EAAKC,GAIzBE,EADgB,WAAf,EAAOH,IAA+B,MAAXA,EAAI,GACzB,CACLI,YAAY,EACZC,cAAc,EACdC,UAAU,EACVL,MAAAA,GA1BCM,SAAeC,GAClBP,IAAAA,EAAQO,EACLC,OAAAA,OAAOC,OAAO,CACnBN,YAAY,EACZC,cAAc,EACdM,IAAM,WACGV,OAAAA,GAETN,IAAIF,SAAAA,GACFQ,EAAQR,EACHR,KAAAA,WAAWK,YAmBTiB,CAAeN,GAExBQ,OAAOG,eAAeV,EAAUF,EAAKG,GAElCA,EAAKR,KACNQ,EAAKR,IAAIjC,KAAKwC,EAAUD,IAGnB,KAOJjB,OAHPyB,OAAOI,eAAe7B,EAAQc,UAAWF,GAGlCZ,EAGH8B,IAAAA,EACJ,SAAYrF,EAAAA,EAAIsF,GAAI,EAAA,KAAA,GACbtF,KAAAA,GAAKA,EACLsF,KAAAA,GAAKA,GAId,SAASC,EAAIF,GAAStD,IAAM,IAAA,EACtB/B,EAAKD,IACLyF,EAAQzG,EAAQM,GAEhBgD,EAAOmD,EAAMN,IAAIlF,GAJD+B,EAAAA,UAAAA,OAAAA,EAAM,IAAA,MAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAANA,EAAM,EAAA,GAAA,UAAA,GAUnB,OALHM,IACFA,EAAWgD,EAAAA,EAAKrF,CAAAA,EAAIjB,GAAYgD,OAAAA,IAChCyD,EAAMtB,IAAIlE,EAAIqC,KAGTA,EAAAA,GAAKwB,OAAU9B,MAAAA,EAAAA,GAGxB,SAASM,EAAKgD,GACLE,OAAAA,EAAIlF,KAAK,KAAMgF,GA0MxB,QAAA,KAAA,EAvMA,IAAMI,EAAUpD,EAAI,SAAA,GACNrC,SAAAA,EAAAA,EAAIsF,EAAII,EAAIC,GAAQ,IAAA,EAAA,OAAA,EAAA,KAAA,IACxB3F,EAAAA,EAAAA,KAAAA,EAAAA,GAAAA,KAAAA,KAAAA,EAAIsF,KACLd,MAAQkB,IACRC,EAAAA,OAASA,EAHgB,EADd,OAAA,EAAA,EAAeN,GAAf,EAAA,EAAA,CAAA,CAAA,IAAA,SAOXK,MAAAA,SAAAA,EAAIC,GAKF,OAJJ,KAAKC,WAAWD,KACZA,KAAAA,OAASA,EACTnB,KAAAA,MAAQkB,KAER,KAAKlB,QAZI,CAAA,IAAA,aAePmB,MAAAA,SAAAA,GAAQ,IAAA,EAAA,KACVA,OAAAA,EAAOE,KAAK,SAACrB,EAAO7D,GAAM,OAAA,EAAKgF,OAAOhF,KAAO6D,QAhBpC,EAAA,IAuMpB,QAAA,QAAA,EAnLA,IAAMsB,EAAc,SAACJ,EAAIK,GAAWN,OAAAA,EAAQ,WAAMC,OAAAA,GAAIK,IAEtD,SAASC,EAAWV,EAAIW,GACjBzG,KAAiB8F,IACpBA,EAAG9F,GAAiB,IAEtB8F,EAAG9F,GAAeuB,KAAKkF,GA6KzB,QAAA,YAAA,EA1KA,IAAMC,EAAY7D,EAAI,SAAA,GACRrC,SAAAA,EAAAA,EAAIsF,GAAI,IAAA,EAAA,OAAA,EAAA,KAAA,IACZtF,EAAAA,EAAAA,KAAAA,EAAAA,GAAAA,KAAAA,KAAAA,EAAIsF,KACLK,QAAS,EACdK,EAAWV,EAAX,EAAA,IAHkB,EADA,OAAA,EAAA,EAAeD,GAAf,EAAA,EAAA,CAAA,CAAA,IAAA,SAObc,MAAAA,SAAAA,EAAUR,GACVQ,KAAAA,SAAWA,EACXC,KAAAA,WAAa,KAAKT,OAClBA,KAAAA,OAASA,IAVI,CAAA,IAAA,OAab,MAAA,WACF,KAAKA,OACH,KAAKC,cACDS,KAAAA,MAGFA,KAAAA,QAnBW,CAAA,IAAA,MAuBd,MAAA,WACC/D,KAAAA,WACAgE,KAAAA,UAAY,KAAKH,SAASlE,KAAK,KAAKqD,MAzBvB,CAAA,IAAA,WA4BT,MAAA,WACN,KAAKgB,WACDA,KAAAA,cA9BW,CAAA,IAAA,aAkCP,MAAA,WAAA,IAAA,EAAA,KACJ,OAAoB,IAApB,KAAKF,YAAwB,KAAKT,OAAOE,KAAK,SAACrB,EAAO7D,GAAM,OAAA,EAAKyF,WAAWzF,KAAO6D,QAnCxE,EAAA,IA0KtB,QAAA,UAAA,EAnIA,IAAM+B,EAAWlE,EAAI,SAAA,GACPrC,SAAAA,EAAAA,EAAIsF,EAAIP,GAAc,IAAA,EAAA,OAAA,EAAA,KAAA,IAC1B/E,EAAAA,EAAAA,KAAAA,EAAAA,GAAAA,KAAAA,KAAAA,EAAIsF,KACLkB,QAAU,EAAKA,QAAQnG,KAA5B,EAAA,IACKoG,EAAAA,SAAS1B,GAHkB,EADf,OAAA,EAAA,EAAeM,GAAf,EAAA,EAAA,CAAA,CAAA,IAAA,SAOV,MAAA,WACA,OAAA,KAAKtD,OARK,CAAA,IAAA,UAWXyC,MAAAA,SAAAA,GACe,mBAAVA,IAGTA,EAFkBA,EACM,EAAA,KAAKzC,KAFE,GAAA,KAM5B0E,KAAAA,SAASjC,GACTc,KAAAA,GAAGzB,WAnBS,CAAA,IAAA,WAsBVW,MAAAA,SAAAA,GACFzC,KAAAA,KAAOiD,OAAOC,OAAO,CAACT,EAAO,KAAKgC,cAvBtB,EAAA,IAmIrB,QAAA,SAAA,EAxGA,IAAME,EAAarE,EAAI,SAAA,GACTrC,SAAAA,EAAAA,EAAIsF,EAAIvB,EAAG4C,GAAc,IAAA,EAAA,OAAA,EAAA,KAAA,IAC7B3G,EAAAA,EAAAA,KAAAA,EAAAA,GAAAA,KAAAA,KAAAA,EAAIsF,KACLsB,SAAW,EAAKA,SAASvG,KAA9B,EAAA,IACKwG,EAAAA,MAAQF,EAHsB,EADhB,OAAA,EAAA,EAAetB,GAAf,EAAA,EAAA,CAAA,CAAA,IAAA,SAOdyB,MAAAA,SAAAA,GAEE,OADFA,KAAAA,QAAUA,EACR,CAAC,KAAKD,MAAO,KAAKD,YATN,CAAA,IAAA,WAYZG,MAAAA,SAAAA,GACFF,KAAAA,MAAQ,KAAKC,QAAQ,KAAKD,MAAOE,GACjCzB,KAAAA,GAAGzB,aAdW,EAAA,IAwGvB,QAAA,WAAA,EAtFMmD,IAAAA,EAsFN,SAAA,GArFc7F,SAAAA,EAAAA,EAAU2B,GAAM,IAAA,EAAA,OAAA,EAAA,KAAA,IACpB3B,EAAAA,EAAAA,KAAAA,EAAAA,GAAAA,KAAAA,KAAAA,EAAU2B,KACXmE,SAAU,EAFW,EAqF9B,OAAA,EAAA,EAtFiC/F,GAsFjC,EAAA,EAAA,CAAA,CAAA,IAAA,SAhFSM,MAAAA,SAAAA,GACAH,KAAAA,KAAK6F,SAAS1F,GACdH,KAAAA,KAAKO,aA8Ed,EAAA,GA1EMuF,EAAM,IAAIC,QAEhB,SAASC,EAAUlG,GAaV,OAAA,EAAUmG,EAAAA,WAZRA,WAAWvF,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAM,IAAA,MAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAANA,EAAM,GAAA,UAAA,GACjB,OAAA,SAAAe,GACDyE,IAAAA,EAAOJ,EAAIjC,IAAIpC,GACfyE,IACFA,EAAO,IAAIP,EAAmB7F,EAAU2B,GACxCqE,EAAIjD,IAAIpB,EAAMyE,IAEhBA,EAAKxF,KAAOA,EACZwF,EAAK1D,YAOX,SAAS2D,EAAYlC,EAAImC,GAClBhI,KAAiB6F,IACpBA,EAAG7F,GAAiB,IAEtB6F,EAAG7F,GAAesB,KAAK0G,GAGzB,IAAMC,EAAarF,EAAI,SAAA,GACTrC,SAAAA,EAAAA,EAAIsF,GAAI,IAAA,EAAA,OAAA,EAAA,KAAA,GAElBkC,EAAYlC,EAAZ,EADMtF,EAAAA,EAAAA,KAAAA,EAAAA,GAAAA,KAAAA,KAAAA,EAAIsF,MAELqC,EAAAA,SAAW,EAAKA,SAAStH,KAA9B,EAAA,IAHkB,EADC,OAAA,EAAA,EAAegF,GAAf,EAAA,EAAA,CAAA,CAAA,IAAA,SAOduC,MAAAA,SAAAA,GACD,GAAA,KAAKtC,GAAG2B,QACJ,MAAA,IAAIY,MAAM,yCAQX,OALH,KAAKD,UAAYA,IACdE,KAAAA,WAAWF,GACXA,KAAAA,QAAUA,GAGV,KAAKpD,QAjBO,CAAA,IAAA,WAoBZA,MAAAA,SAAAA,GACFA,KAAAA,MAAQA,EACRc,KAAAA,GAAGzB,WAtBW,CAAA,IAAA,aAyBV+D,MAAAA,SAAAA,GACHG,IAAAA,EAAS,CAAEH,QAAAA,EAASzB,SAAU,KAAKwB,UAEpCrC,KAAAA,GAAGjE,KAAK2G,cAAc,IAAIC,YAAYvI,EAAc,CACvDqI,OAAAA,EACAG,SAAS,EACTC,YAAY,EACZC,UAAU,KAGJC,IAAAA,EAAuBN,EAAvBM,YAAa7D,EAAUuD,EAAVvD,MAEhBA,KAAAA,MAAQ6D,EAAc7D,EAAQoD,EAAQU,aAEtCC,KAAAA,aAAeF,IAvCD,CAAA,IAAA,WA0CV,MAAA,WACL,KAAKE,cACFA,KAAAA,mBA5CY,EAAA,IAiDvB,QAAA,WAAA,EAAA,IAAMC,EAAgB,SAACF,GACfV,IAAAA,EAAU,GAoDTA,OAlDPA,EAAQa,SAAR,SAAA,GACgB,SAAA,IAAA,IAAA,EAAA,OAAA,EAAA,KAAA,IACZ,EAAA,EAAA,KAAA,EAAA,GAAA,KAAA,QACKC,UAAY,GAEZC,EAAAA,aAAe,SAACC,GACXb,IAAAA,EAAWa,EAAXb,OAEJA,EAAOH,UAAYA,IACrBG,EAAOvD,MAAQ,EAAKA,MAEpBuD,EAAOM,YAAc,WACbQ,IAAAA,EAAQ,EAAKH,UAAUjG,QAAQsF,EAAO5B,UAExC0C,GAAS,GACNH,EAAAA,UAAUI,OAAOD,EAAO,IAI5BH,EAAAA,UAAU3H,KAAKgH,EAAO5B,UAE3ByC,EAAMG,oBAILC,EAAAA,iBAAiBtJ,EAAc,EAAKiJ,cAxB7B,EADhB,OAAA,EAAA,EAAiCvF,EAAAA,cAAjC,EAAA,EAAA,CAAA,CAAA,IAAA,uBA4ByB,MAAA,WAChB6F,KAAAA,oBAAoBvJ,EAAc,KAAKiJ,gBA7BhD,CAAA,IAAA,QAgCYnE,IAAAA,SAAAA,GACH0E,KAAAA,OAAS1E,EACTkE,KAAAA,UAAUtG,QAAQ,SAAA+D,GAAYA,OAAAA,EAAS3B,MAGlC,IAAA,WACH,OAAA,KAAK0E,WAtChB,EAAA,GA0CAtB,EAAQuB,SAAWjG,EAAU,SAAiC,GAGrDkG,OAAAA,EAHgCvH,EAAAA,QACvB6F,EAAWE,MAK7BA,EAAQU,aAAeA,EAEhBV,GArDT,QAAA,cAAA;;ACjYA,aAAA,IAAA,EAAA,MAAA,KAAA,sBAAA,SAAA,EAAA,GAAA,OAAA,OAAA,eAAA,OAAA,eAAA,EAAA,MAAA,CAAA,MAAA,IAAA,EAAA,IAAA,EAAA,GAAA,QAAA,YAAA,EAlDA,IAkDA,EAAA,EAAA,EAlDA,EAAA,QAAA,uBACA,EAAA,QAAA,YAEM,EAAY,GAElB,SAAS,EAAe,GAChB,IAAA,EAAQ,OAAO,EAAG,OAChB,EAAA,EAAA,MAAO,EAAA,EAAA,KAER,OAAA,EAAA,KAAI,IAAA,EAAA,EAAA,CAAA,cAAA,8FAAA,8FAAA,4TAAA,QAAA,CAAA,cACW,8FAGG,8FAGD,4TA4BjB,UAlCE,OAAO,OAGI,EAGA,EAiBhB,EAAQ,EACN,EAAA,KAAI,IAAA,EAAA,EAAA,CAAA,qCAAA,sBAAA,CAAA,qCAC8D,yBAAvC,KAAK,MAAQ,OAAO,aAAe,KAE9D,EAAA,KAAI,IAAA,EAAA,EAAA,CAAA,iEAAA,yBAAA,yBAAA,wBAAA,8CAAA,CAAA,iEAE+B,yBACb,yBACJ,wBACF,gDAHU,EAAQ,EACrB,EAAQ,EACR,EACD,IAMpB,EAAe,mBAAqB,CAAC,QAAS,QAAS,QAEvD,eAAe,OACb,kBACA,EAAA,UAAU,EAAgB,YAAa,CACrC,cAAc;;;;ACiBlB,aAAA,IAAA,EAAA,MAAA,KAAA,sBAAA,SAAA,EAAA,GAAA,OAAA,OAAA,eAAA,OAAA,eAAA,EAAA,MAAA,CAAA,MAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,MAAA,KAAA,UAAA,WAAA,OAAA,EAAA,OAAA,QAAA,SAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,IAAA,IAAA,KAAA,EAAA,UAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,IAAA,MAAA,KAAA,YAAA,QAAA,YAAA,EAtEA,IAAA,EAAA,QAAA,uBACA,QAAA,8BACA,QAAA,+BAEA,IAAI,GAAU,EAMd,SAAS,IACP,OAAO,sBAAsB,WAC3B,OAAO,SACH,GACF,QAAQ,IAAI,QAAU,OAAO,QAE/B,MAXJ,WAAW,WACT,GAAU,GACT,KAEH,OAAO,OAAS,EAUhB,IAEA,IAiDA,EAjDM,EAAU,SAAC,EAAO,GACd,OAAA,EAAO,MACR,IAAA,QACH,OAAA,EAAA,GACK,EAAK,CACR,MAAO,EAAO,OAEb,IAAA,OACH,OAAA,EAAA,GACK,EAAK,CACR,KAAM,EAAO,SAKrB,SAAS,EAAmB,GAC1B,OAAO,YAAc,KAAK,MAEpB,IAAA,EAAA,EAAA,WAAA,EAAA,CAAA,MAAA,QA+BR,KAAA,cA/BS,EAAA,EAAA,GAAE,EAAA,EAAA,MAAO,EAAA,EAAA,KAAQ,EAAA,EAAA,GAajB,OAAA,EAAA,KAAI,IAAA,EAAA,EAAA,CAAA,uGAAA,eAAA,IAAA,8EAAA,oCAAA,kBAAA,wCAAA,CAAA,uGAGa,eAEX,IAAQ,8EAIA,oCAEH,kBACF,0CATL,OAAO,OAEV,EAAS,EAbD,SAAA,GACR,IAAA,EAAS,EAAG,KAAK,GACvB,EAAS,CACP,KAAM,EAAO,KACb,KAAM,EAAO,SAeJ,EACD,GAMd,eAAe,OACb,6BACA,EAAA,UAAU,EAAoB,YAAa,CACzC,cAAc","file":"nested-children-test-micro.83d7fd7f.map","sourceRoot":"../src/_html-web","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {Part} from './part.js';\n\nconst directives = new WeakMap<object, true>();\n\n// tslint:disable-next-line:no-any\nexport type DirectiveFactory = (...args: any[]) => object;\n\nexport type DirectiveFn = (part: Part) => void;\n\n/**\n * Brands a function as a directive so that lit-html will call the function\n * during template rendering, rather than passing as a value.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object\n *\n * @example\n *\n * ```\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n * ```\n */\n// tslint:disable-next-line:no-any\nexport const directive = <F extends DirectiveFactory>(f: F): F =>\n    ((...args: unknown[]) => {\n      const d = f(...args);\n      directives.set(d, true);\n      return d;\n    }) as F;\n\nexport const isDirective = (o: unknown): o is DirectiveFn => {\n  return typeof o === 'function' && directives.has(o);\n};\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\ninterface MaybePolyfilledCe extends CustomElementRegistry {\n  polyfillWrapFlushCallback?: object;\n}\n\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    (window.customElements as MaybePolyfilledCe).polyfillWrapFlushCallback !==\n        undefined;\n\n/**\n * Reparents nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), into another container (could be the same container), before\n * `beforeNode`. If `beforeNode` is null, it appends the nodes to the\n * container.\n */\nexport const reparentNodes =\n    (container: Node,\n     start: Node|null,\n     end: Node|null = null,\n     before: Node|null = null): void => {\n      let node = start;\n      while (node !== end) {\n        const n = node!.nextSibling;\n        container.insertBefore(node!, before as Node);\n        node = n;\n      }\n    };\n\n/**\n * Removes nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), from `container`.\n */\nexport const removeNodes =\n    (container: Node, startNode: Node|null, endNode: Node|null = null):\n        void => {\n          let node = startNode;\n          while (node !== endNode) {\n            const n = node!.nextSibling;\n            container.removeChild(node!);\n            node = n;\n          }\n        };\n","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\n/**\n * The Part interface represents a dynamic part of a template instance rendered\n * by lit-html.\n */\nexport interface Part {\n  value: unknown;\n\n  /**\n   * Sets the current part value, but does not write it to the DOM.\n   * @param value The value that will be committed.\n   */\n  setValue(value: unknown): void;\n\n  /**\n   * Commits the current part value, cause it to actually be written to the DOM.\n   */\n  commit(): void;\n}\n\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange: object = {};\n\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {TemplateResult} from './template-result.js';\n\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\n\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n  parts: TemplatePart[] = [];\n  element: HTMLTemplateElement;\n\n  constructor(result: TemplateResult, element: HTMLTemplateElement) {\n    this.element = element;\n    let index = -1;\n    let partIndex = 0;\n    const nodesToRemove: Node[] = [];\n    const _prepareTemplate = (template: HTMLTemplateElement) => {\n      const content = template.content;\n      // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n      // null\n      const walker = document.createTreeWalker(\n          content,\n          133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n          null,\n          false);\n      // Keeps track of the last index associated with a part. We try to delete\n      // unnecessary nodes, but we never want to associate two different parts\n      // to the same index. They must have a constant node between.\n      let lastPartIndex = 0;\n      while (walker.nextNode()) {\n        index++;\n        const node = walker.currentNode as Element | Comment | Text;\n        if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n          if ((node as Element).hasAttributes()) {\n            const attributes = (node as Element).attributes;\n            // Per\n            // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n            // attributes are not guaranteed to be returned in document order.\n            // In particular, Edge/IE can return them out of order, so we cannot\n            // assume a correspondance between part index and attribute index.\n            let count = 0;\n            for (let i = 0; i < attributes.length; i++) {\n              if (attributes[i].value.indexOf(marker) >= 0) {\n                count++;\n              }\n            }\n            while (count-- > 0) {\n              // Get the template literal section leading up to the first\n              // expression in this attribute\n              const stringForPart = result.strings[partIndex];\n              // Find the attribute name\n              const name = lastAttributeNameRegex.exec(stringForPart)![2];\n              // Find the corresponding attribute\n              // All bound attributes have had a suffix added in\n              // TemplateResult#getHTML to opt out of special attribute\n              // handling. To look up the attribute value we also need to add\n              // the suffix.\n              const attributeLookupName =\n                  name.toLowerCase() + boundAttributeSuffix;\n              const attributeValue =\n                  (node as Element).getAttribute(attributeLookupName)!;\n              const strings = attributeValue.split(markerRegex);\n              this.parts.push({type: 'attribute', index, name, strings});\n              (node as Element).removeAttribute(attributeLookupName);\n              partIndex += strings.length - 1;\n            }\n          }\n          if ((node as Element).tagName === 'TEMPLATE') {\n            _prepareTemplate(node as HTMLTemplateElement);\n          }\n        } else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n          const data = (node as Text).data!;\n          if (data.indexOf(marker) >= 0) {\n            const parent = node.parentNode!;\n            const strings = data.split(markerRegex);\n            const lastIndex = strings.length - 1;\n            // Generate a new text node for each literal section\n            // These nodes are also used as the markers for node parts\n            for (let i = 0; i < lastIndex; i++) {\n              parent.insertBefore(\n                  (strings[i] === '') ? createMarker() :\n                                        document.createTextNode(strings[i]),\n                  node);\n              this.parts.push({type: 'node', index: ++index});\n            }\n            // If there's no text, we must insert a comment to mark our place.\n            // Else, we can trust it will stick around after cloning.\n            if (strings[lastIndex] === '') {\n              parent.insertBefore(createMarker(), node);\n              nodesToRemove.push(node);\n            } else {\n              (node as Text).data = strings[lastIndex];\n            }\n            // We have a part for each match found\n            partIndex += lastIndex;\n          }\n        } else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n          if ((node as Comment).data === marker) {\n            const parent = node.parentNode!;\n            // Add a new marker node to be the startNode of the Part if any of\n            // the following are true:\n            //  * We don't have a previousSibling\n            //  * The previousSibling is already the start of a previous part\n            if (node.previousSibling === null || index === lastPartIndex) {\n              index++;\n              parent.insertBefore(createMarker(), node);\n            }\n            lastPartIndex = index;\n            this.parts.push({type: 'node', index});\n            // If we don't have a nextSibling, keep this node so we have an end.\n            // Else, we can remove it to save future costs.\n            if (node.nextSibling === null) {\n              (node as Comment).data = '';\n            } else {\n              nodesToRemove.push(node);\n              index--;\n            }\n            partIndex++;\n          } else {\n            let i = -1;\n            while ((i = (node as Comment).data!.indexOf(marker, i + 1)) !==\n                   -1) {\n              // Comment node has a binding marker inside, make an inactive part\n              // The binding won't work, but subsequent bindings will\n              // TODO (justinfagnani): consider whether it's even worth it to\n              // make bindings in comments work\n              this.parts.push({type: 'node', index: -1});\n            }\n          }\n        }\n      }\n    };\n    _prepareTemplate(element);\n    // Remove text binding nodes after the walk to not disturb the TreeWalker\n    for (const n of nodesToRemove) {\n      n.parentNode!.removeChild(n);\n    }\n  }\n}\n\n/**\n * A placeholder for a dynamic expression in an HTML template.\n *\n * There are two built-in part types: AttributePart and NodePart. NodeParts\n * always represent a single dynamic expression, while AttributeParts may\n * represent as many expressions are contained in the attribute.\n *\n * A Template's parts are mutable, so parts can be replaced or modified\n * (possibly to implement different template semantics). The contract is that\n * parts can only be replaced, not removed, added or reordered, and parts must\n * always consume the correct number of values in their `update()` method.\n *\n * TODO(justinfagnani): That requirement is a little fragile. A\n * TemplateInstance could instead be more careful about which values it gives\n * to Part.update().\n */\nexport type TemplatePart = {\n  type: 'node',\n  index: number\n}|{type: 'attribute', index: number, name: string, strings: string[]};\n\nexport const isTemplatePartActive = (part: TemplatePart) => part.index !== -1;\n\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#attributes-0\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-character\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex =\n    /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \\x09\\x0a\\x0c\\x0d\"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {isCEPolyfill} from './dom.js';\nimport {Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {isTemplatePartActive, Template} from './template.js';\n\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n  _parts: Array<Part|undefined> = [];\n  processor: TemplateProcessor;\n  options: RenderOptions;\n  template: Template;\n\n  constructor(\n      template: Template, processor: TemplateProcessor,\n      options: RenderOptions) {\n    this.template = template;\n    this.processor = processor;\n    this.options = options;\n  }\n\n  update(values: unknown[]) {\n    let i = 0;\n    for (const part of this._parts) {\n      if (part !== undefined) {\n        part.setValue(values[i]);\n      }\n      i++;\n    }\n    for (const part of this._parts) {\n      if (part !== undefined) {\n        part.commit();\n      }\n    }\n  }\n\n  _clone(): DocumentFragment {\n    // When using the Custom Elements polyfill, clone the node, rather than\n    // importing it, to keep the fragment in the template's document. This\n    // leaves the fragment inert so custom elements won't upgrade and\n    // potentially modify their contents by creating a polyfilled ShadowRoot\n    // while we traverse the tree.\n    const fragment = isCEPolyfill ?\n        this.template.element.content.cloneNode(true) as DocumentFragment :\n        document.importNode(this.template.element.content, true);\n\n    const parts = this.template.parts;\n    let partIndex = 0;\n    let nodeIndex = 0;\n    const _prepareInstance = (fragment: DocumentFragment) => {\n      // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n      // null\n      const walker = document.createTreeWalker(\n          fragment,\n          133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n          null,\n          false);\n      let node = walker.nextNode();\n      // Loop through all the nodes and parts of a template\n      while (partIndex < parts.length && node !== null) {\n        const part = parts[partIndex];\n        // Consecutive Parts may have the same node index, in the case of\n        // multiple bound attributes on an element. So each iteration we either\n        // increment the nodeIndex, if we aren't on a node with a part, or the\n        // partIndex if we are. By not incrementing the nodeIndex when we find a\n        // part, we allow for the next part to be associated with the current\n        // node if neccessasry.\n        if (!isTemplatePartActive(part)) {\n          this._parts.push(undefined);\n          partIndex++;\n        } else if (nodeIndex === part.index) {\n          if (part.type === 'node') {\n            const part = this.processor.handleTextExpression(this.options);\n            part.insertAfterNode(node.previousSibling!);\n            this._parts.push(part);\n          } else {\n            this._parts.push(...this.processor.handleAttributeExpressions(\n                node as Element, part.name, part.strings, this.options));\n          }\n          partIndex++;\n        } else {\n          nodeIndex++;\n          if (node.nodeName === 'TEMPLATE') {\n            _prepareInstance((node as HTMLTemplateElement).content);\n          }\n          node = walker.nextNode();\n        }\n      }\n    };\n    _prepareInstance(fragment);\n    if (isCEPolyfill) {\n      document.adoptNode(fragment);\n      customElements.upgrade(fragment);\n    }\n    return fragment;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {reparentNodes} from './dom.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker} from './template.js';\n\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n  strings: TemplateStringsArray;\n  values: unknown[];\n  type: string;\n  processor: TemplateProcessor;\n\n  constructor(\n      strings: TemplateStringsArray, values: unknown[], type: string,\n      processor: TemplateProcessor) {\n    this.strings = strings;\n    this.values = values;\n    this.type = type;\n    this.processor = processor;\n  }\n\n  /**\n   * Returns a string of HTML used to create a `<template>` element.\n   */\n  getHTML(): string {\n    const endIndex = this.strings.length - 1;\n    let html = '';\n    for (let i = 0; i < endIndex; i++) {\n      const s = this.strings[i];\n      // This exec() call does two things:\n      // 1) Appends a suffix to the bound attribute name to opt out of special\n      // attribute value parsing that IE11 and Edge do, like for style and\n      // many SVG attributes. The Template class also appends the same suffix\n      // when looking up attributes to create Parts.\n      // 2) Adds an unquoted-attribute-safe marker for the first expression in\n      // an attribute. Subsequent attribute expressions will use node markers,\n      // and this is safe since attributes with multiple expressions are\n      // guaranteed to be quoted.\n      const match = lastAttributeNameRegex.exec(s);\n      if (match) {\n        // We're starting a new bound attribute.\n        // Add the safe attribute suffix, and use unquoted-attribute-safe\n        // marker.\n        html += s.substr(0, match.index) + match[1] + match[2] +\n            boundAttributeSuffix + match[3] + marker;\n      } else {\n        // We're either in a bound node, or trailing bound attribute.\n        // Either way, nodeMarker is safe to use.\n        html += s + nodeMarker;\n      }\n    }\n    return html + this.strings[endIndex];\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = document.createElement('template');\n    template.innerHTML = this.getHTML();\n    return template;\n  }\n}\n\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTMl in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n  getHTML(): string {\n    return `<svg>${super.getHTML()}</svg>`;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = super.getTemplateElement();\n    const content = template.content;\n    const svgElement = content.firstChild!;\n    content.removeChild(svgElement);\n    reparentNodes(content, svgElement.firstChild);\n    return template;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {isDirective} from './directive.js';\nimport {removeNodes} from './dom.js';\nimport {noChange, nothing, Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateInstance} from './template-instance.js';\nimport {TemplateResult} from './template-result.js';\nimport {createMarker} from './template.js';\n\n// https://tc39.github.io/ecma262/#sec-typeof-operator\nexport type Primitive = null|undefined|boolean|number|string|Symbol|bigint;\nexport const isPrimitive = (value: unknown): value is Primitive => {\n  return (\n      value === null ||\n      !(typeof value === 'object' || typeof value === 'function'));\n};\n\n/**\n * Sets attribute values for AttributeParts, so that the value is only set once\n * even if there are multiple parts for an attribute.\n */\nexport class AttributeCommitter {\n  element: Element;\n  name: string;\n  strings: string[];\n  parts: AttributePart[];\n  dirty = true;\n\n  constructor(element: Element, name: string, strings: string[]) {\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n    this.parts = [];\n    for (let i = 0; i < strings.length - 1; i++) {\n      this.parts[i] = this._createPart();\n    }\n  }\n\n  /**\n   * Creates a single part. Override this to create a differnt type of part.\n   */\n  protected _createPart(): AttributePart {\n    return new AttributePart(this);\n  }\n\n  protected _getValue(): unknown {\n    const strings = this.strings;\n    const l = strings.length - 1;\n    let text = '';\n\n    for (let i = 0; i < l; i++) {\n      text += strings[i];\n      const part = this.parts[i];\n      if (part !== undefined) {\n        const v = part.value;\n        if (v != null &&\n            (Array.isArray(v) ||\n             // tslint:disable-next-line:no-any\n             typeof v !== 'string' && (v as any)[Symbol.iterator])) {\n          for (const t of v as Iterable<unknown>) {\n            text += typeof t === 'string' ? t : String(t);\n          }\n        } else {\n          text += typeof v === 'string' ? v : String(v);\n        }\n      }\n    }\n\n    text += strings[l];\n    return text;\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      this.element.setAttribute(this.name, this._getValue() as string);\n    }\n  }\n}\n\nexport class AttributePart implements Part {\n  committer: AttributeCommitter;\n  value: unknown = undefined;\n\n  constructor(comitter: AttributeCommitter) {\n    this.committer = comitter;\n  }\n\n  setValue(value: unknown): void {\n    if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n      this.value = value;\n      // If the value is a not a directive, dirty the committer so that it'll\n      // call setAttribute. If the value is a directive, it'll dirty the\n      // committer if it calls setValue().\n      if (!isDirective(value)) {\n        this.committer.dirty = true;\n      }\n    }\n  }\n\n  commit() {\n    while (isDirective(this.value)) {\n      const directive = this.value;\n      this.value = noChange;\n      directive(this);\n    }\n    if (this.value === noChange) {\n      return;\n    }\n    this.committer.commit();\n  }\n}\n\nexport class NodePart implements Part {\n  options: RenderOptions;\n  startNode!: Node;\n  endNode!: Node;\n  value: unknown = undefined;\n  _pendingValue: unknown = undefined;\n\n  constructor(options: RenderOptions) {\n    this.options = options;\n  }\n\n  /**\n   * Inserts this part into a container.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendInto(container: Node) {\n    this.startNode = container.appendChild(createMarker());\n    this.endNode = container.appendChild(createMarker());\n  }\n\n  /**\n   * Inserts this part between `ref` and `ref`'s next sibling. Both `ref` and\n   * its next sibling must be static, unchanging nodes such as those that appear\n   * in a literal section of a template.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterNode(ref: Node) {\n    this.startNode = ref;\n    this.endNode = ref.nextSibling!;\n  }\n\n  /**\n   * Appends this part into a parent part.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendIntoPart(part: NodePart) {\n    part._insert(this.startNode = createMarker());\n    part._insert(this.endNode = createMarker());\n  }\n\n  /**\n   * Appends this part after `ref`\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterPart(ref: NodePart) {\n    ref._insert(this.startNode = createMarker());\n    this.endNode = ref.endNode;\n    ref.endNode = this.startNode;\n  }\n\n  setValue(value: unknown): void {\n    this._pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this._pendingValue)) {\n      const directive = this._pendingValue;\n      this._pendingValue = noChange;\n      directive(this);\n    }\n    const value = this._pendingValue;\n    if (value === noChange) {\n      return;\n    }\n    if (isPrimitive(value)) {\n      if (value !== this.value) {\n        this._commitText(value);\n      }\n    } else if (value instanceof TemplateResult) {\n      this._commitTemplateResult(value);\n    } else if (value instanceof Node) {\n      this._commitNode(value);\n    } else if (\n        Array.isArray(value) ||\n        // tslint:disable-next-line:no-any\n        (value as any)[Symbol.iterator]) {\n      this._commitIterable(value as Iterable<unknown>);\n    } else if (value === nothing) {\n      this.value = nothing;\n      this.clear();\n    } else {\n      // Fallback, will render the string representation\n      this._commitText(value);\n    }\n  }\n\n  private _insert(node: Node) {\n    this.endNode.parentNode!.insertBefore(node, this.endNode);\n  }\n\n  private _commitNode(value: Node): void {\n    if (this.value === value) {\n      return;\n    }\n    this.clear();\n    this._insert(value);\n    this.value = value;\n  }\n\n  private _commitText(value: unknown): void {\n    const node = this.startNode.nextSibling!;\n    value = value == null ? '' : value;\n    if (node === this.endNode.previousSibling &&\n        node.nodeType === 3 /* Node.TEXT_NODE */) {\n      // If we only have a single text node between the markers, we can just\n      // set its value, rather than replacing it.\n      // TODO(justinfagnani): Can we just check if this.value is primitive?\n      (node as Text).data = value as string;\n    } else {\n      this._commitNode(document.createTextNode(\n          typeof value === 'string' ? value : String(value)));\n    }\n    this.value = value;\n  }\n\n  private _commitTemplateResult(value: TemplateResult): void {\n    const template = this.options.templateFactory(value);\n    if (this.value instanceof TemplateInstance &&\n        this.value.template === template) {\n      this.value.update(value.values);\n    } else {\n      // Make sure we propagate the template processor from the TemplateResult\n      // so that we use its syntax extension, etc. The template factory comes\n      // from the render function options so that it can control template\n      // caching and preprocessing.\n      const instance =\n          new TemplateInstance(template, value.processor, this.options);\n      const fragment = instance._clone();\n      instance.update(value.values);\n      this._commitNode(fragment);\n      this.value = instance;\n    }\n  }\n\n  private _commitIterable(value: Iterable<unknown>): void {\n    // For an Iterable, we create a new InstancePart per item, then set its\n    // value to the item. This is a little bit of overhead for every item in\n    // an Iterable, but it lets us recurse easily and efficiently update Arrays\n    // of TemplateResults that will be commonly returned from expressions like:\n    // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n\n    // If _value is an array, then the previous render was of an\n    // iterable and _value will contain the NodeParts from the previous\n    // render. If _value is not an array, clear this part and make a new\n    // array for NodeParts.\n    if (!Array.isArray(this.value)) {\n      this.value = [];\n      this.clear();\n    }\n\n    // Lets us keep track of how many items we stamped so we can clear leftover\n    // items from a previous render\n    const itemParts = this.value as NodePart[];\n    let partIndex = 0;\n    let itemPart: NodePart|undefined;\n\n    for (const item of value) {\n      // Try to reuse an existing part\n      itemPart = itemParts[partIndex];\n\n      // If no existing part, create a new one\n      if (itemPart === undefined) {\n        itemPart = new NodePart(this.options);\n        itemParts.push(itemPart);\n        if (partIndex === 0) {\n          itemPart.appendIntoPart(this);\n        } else {\n          itemPart.insertAfterPart(itemParts[partIndex - 1]);\n        }\n      }\n      itemPart.setValue(item);\n      itemPart.commit();\n      partIndex++;\n    }\n\n    if (partIndex < itemParts.length) {\n      // Truncate the parts array so _value reflects the current state\n      itemParts.length = partIndex;\n      this.clear(itemPart && itemPart!.endNode);\n    }\n  }\n\n  clear(startNode: Node = this.startNode) {\n    removeNodes(\n        this.startNode.parentNode!, startNode.nextSibling!, this.endNode);\n  }\n}\n\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart implements Part {\n  element: Element;\n  name: string;\n  strings: string[];\n  value: unknown = undefined;\n  _pendingValue: unknown = undefined;\n\n  constructor(element: Element, name: string, strings: string[]) {\n    if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n      throw new Error(\n          'Boolean attributes can only contain a single expression');\n    }\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n  }\n\n  setValue(value: unknown): void {\n    this._pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this._pendingValue)) {\n      const directive = this._pendingValue;\n      this._pendingValue = noChange;\n      directive(this);\n    }\n    if (this._pendingValue === noChange) {\n      return;\n    }\n    const value = !!this._pendingValue;\n    if (this.value !== value) {\n      if (value) {\n        this.element.setAttribute(this.name, '');\n      } else {\n        this.element.removeAttribute(this.name);\n      }\n    }\n    this.value = value;\n    this._pendingValue = noChange;\n  }\n}\n\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n  single: boolean;\n\n  constructor(element: Element, name: string, strings: string[]) {\n    super(element, name, strings);\n    this.single =\n        (strings.length === 2 && strings[0] === '' && strings[1] === '');\n  }\n\n  protected _createPart(): PropertyPart {\n    return new PropertyPart(this);\n  }\n\n  _getValue() {\n    if (this.single) {\n      return this.parts[0].value;\n    }\n    return super._getValue();\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      // tslint:disable-next-line:no-any\n      (this.element as any)[this.name] = this._getValue();\n    }\n  }\n}\n\nexport class PropertyPart extends AttributePart {}\n\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\n\ntry {\n  const options = {\n    get capture() {\n      eventOptionsSupported = true;\n      return false;\n    }\n  };\n  // tslint:disable-next-line:no-any\n  window.addEventListener('test', options as any, options);\n  // tslint:disable-next-line:no-any\n  window.removeEventListener('test', options as any, options);\n} catch (_e) {\n}\n\n\ntype EventHandlerWithOptions =\n    EventListenerOrEventListenerObject&Partial<AddEventListenerOptions>;\nexport class EventPart implements Part {\n  element: Element;\n  eventName: string;\n  eventContext?: EventTarget;\n  value: undefined|EventHandlerWithOptions = undefined;\n  _options?: AddEventListenerOptions;\n  _pendingValue: undefined|EventHandlerWithOptions = undefined;\n  _boundHandleEvent: (event: Event) => void;\n\n  constructor(element: Element, eventName: string, eventContext?: EventTarget) {\n    this.element = element;\n    this.eventName = eventName;\n    this.eventContext = eventContext;\n    this._boundHandleEvent = (e) => this.handleEvent(e);\n  }\n\n  setValue(value: undefined|EventHandlerWithOptions): void {\n    this._pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this._pendingValue)) {\n      const directive = this._pendingValue;\n      this._pendingValue = noChange as EventHandlerWithOptions;\n      directive(this);\n    }\n    if (this._pendingValue === noChange) {\n      return;\n    }\n\n    const newListener = this._pendingValue;\n    const oldListener = this.value;\n    const shouldRemoveListener = newListener == null ||\n        oldListener != null &&\n            (newListener.capture !== oldListener.capture ||\n             newListener.once !== oldListener.once ||\n             newListener.passive !== oldListener.passive);\n    const shouldAddListener =\n        newListener != null && (oldListener == null || shouldRemoveListener);\n\n    if (shouldRemoveListener) {\n      this.element.removeEventListener(\n          this.eventName, this._boundHandleEvent, this._options);\n    }\n    if (shouldAddListener) {\n      this._options = getOptions(newListener);\n      this.element.addEventListener(\n          this.eventName, this._boundHandleEvent, this._options);\n    }\n    this.value = newListener;\n    this._pendingValue = noChange as EventHandlerWithOptions;\n  }\n\n  handleEvent(event: Event) {\n    if (typeof this.value === 'function') {\n      this.value.call(this.eventContext || this.element, event);\n    } else {\n      (this.value as EventListenerObject).handleEvent(event);\n    }\n  }\n}\n\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o: AddEventListenerOptions|undefined) => o &&\n    (eventOptionsSupported ?\n         {capture: o.capture, passive: o.passive, once: o.once} :\n         o.capture as AddEventListenerOptions);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {Part} from './part.js';\nimport {AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\n\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor implements TemplateProcessor {\n  /**\n   * Create parts for an attribute-position binding, given the event, attribute\n   * name, and string literals.\n   *\n   * @param element The element containing the binding\n   * @param name  The attribute name\n   * @param strings The string literals. There are always at least two strings,\n   *   event for fully-controlled bindings with a single expression.\n   */\n  handleAttributeExpressions(\n      element: Element, name: string, strings: string[],\n      options: RenderOptions): Part[] {\n    const prefix = name[0];\n    if (prefix === '.') {\n      const comitter = new PropertyCommitter(element, name.slice(1), strings);\n      return comitter.parts;\n    }\n    if (prefix === '@') {\n      return [new EventPart(element, name.slice(1), options.eventContext)];\n    }\n    if (prefix === '?') {\n      return [new BooleanAttributePart(element, name.slice(1), strings)];\n    }\n    const comitter = new AttributeCommitter(element, name, strings);\n    return comitter.parts;\n  }\n  /**\n   * Create parts for a text-position binding.\n   * @param templateFactory\n   */\n  handleTextExpression(options: RenderOptions) {\n    return new NodePart(options);\n  }\n}\n\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {TemplateResult} from './template-result.js';\nimport {marker, Template} from './template.js';\n\n/**\n * A function type that creates a Template from a TemplateResult.\n *\n * This is a hook into the template-creation process for rendering that\n * requires some modification of templates before they're used, like ShadyCSS,\n * which must add classes to elements and remove styles.\n *\n * Templates should be cached as aggressively as possible, so that many\n * TemplateResults produced from the same expression only do the work of\n * creating the Template the first time.\n *\n * Templates are usually cached by TemplateResult.strings and\n * TemplateResult.type, but may be cached by other keys if this function\n * modifies the template.\n *\n * Note that currently TemplateFactories must not add, remove, or reorder\n * expressions, because there is no way to describe such a modification\n * to render() so that values are interpolated to the correct place in the\n * template instances.\n */\nexport type TemplateFactory = (result: TemplateResult) => Template;\n\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result: TemplateResult) {\n  let templateCache = templateCaches.get(result.type);\n  if (templateCache === undefined) {\n    templateCache = {\n      stringsArray: new WeakMap<TemplateStringsArray, Template>(),\n      keyString: new Map<string, Template>()\n    };\n    templateCaches.set(result.type, templateCache);\n  }\n\n  let template = templateCache.stringsArray.get(result.strings);\n  if (template !== undefined) {\n    return template;\n  }\n\n  // If the TemplateStringsArray is new, generate a key from the strings\n  // This key is shared between all templates with identical content\n  const key = result.strings.join(marker);\n\n  // Check if we already have a Template for this key\n  template = templateCache.keyString.get(key);\n  if (template === undefined) {\n    // If we have not seen this key before, create a new Template\n    template = new Template(result, result.getTemplateElement());\n    // Cache the Template for this key\n    templateCache.keyString.set(key, template);\n  }\n\n  // Cache all future queries for this TemplateStringsArray\n  templateCache.stringsArray.set(result.strings, template);\n  return template;\n}\n\n/**\n * The first argument to JS template tags retain identity across multiple\n * calls to a tag for the same literal, so we can cache work done per literal\n * in a Map.\n *\n * Safari currently has a bug which occasionally breaks this behaviour, so we\n * need to cache the Template at two levels. We first cache the\n * TemplateStringsArray, and if that fails, we cache a key constructed by\n * joining the strings array.\n */\nexport type templateCache = {\n  stringsArray: WeakMap<TemplateStringsArray, Template>;\n  keyString: Map<string, Template>;\n};\n\nexport const templateCaches = new Map<string, templateCache>();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {removeNodes} from './dom.js';\nimport {NodePart} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {templateFactory} from './template-factory.js';\nimport {TemplateResult} from './template-result.js';\n\nexport const parts = new WeakMap<Node, NodePart>();\n\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render =\n    (result: TemplateResult,\n     container: Element|DocumentFragment,\n     options?: Partial<RenderOptions>) => {\n      let part = parts.get(container);\n      if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart({\n                               templateFactory,\n                               ...options,\n                             }));\n        part.appendInto(container);\n      }\n      part.setValue(result);\n      part.commit();\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport {defaultTemplateProcessor} from './lib/default-template-processor.js';\nimport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\n\nexport {DefaultTemplateProcessor, defaultTemplateProcessor} from './lib/default-template-processor.js';\nexport {directive, DirectiveFn, isDirective} from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport {removeNodes, reparentNodes} from './lib/dom.js';\nexport {noChange, nothing, Part} from './lib/part.js';\nexport {AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isPrimitive, NodePart, PropertyCommitter, PropertyPart} from './lib/parts.js';\nexport {RenderOptions} from './lib/render-options.js';\nexport {parts, render} from './lib/render.js';\nexport {templateCaches, templateFactory} from './lib/template-factory.js';\nexport {TemplateInstance} from './lib/template-instance.js';\nexport {TemplateProcessor} from './lib/template-processor.js';\nexport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\nexport {createMarker, isTemplatePartActive, Template} from './lib/template.js';\n\ndeclare global {\n  interface Window {\n    litHtmlVersions: string[];\n  }\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.0.0');\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings: TemplateStringsArray, ...values: unknown[]) =>\n    new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings: TemplateStringsArray, ...values: unknown[]) =>\n    new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n","import { render, directive } from 'lit-html';\nexport { html, render } from 'lit-html';\n\nconst symbolFor = typeof Symbol === 'function' ? Symbol.for : str => str;\n\nconst phaseSymbol = symbolFor('haunted.phase');\nconst hookSymbol = symbolFor('haunted.hook');\n\nconst updateSymbol = symbolFor('haunted.update');\nconst commitSymbol = symbolFor('haunted.commit');\nconst effectsSymbol = symbolFor('haunted.effects');\nconst contextSymbol = symbolFor('haunted.context');\n\nconst contextEvent = 'haunted.context';\n\nlet current;\nlet currentId = 0;\n\nfunction setCurrent(element) {\n  current = element;\n}\n\nfunction clear() {\n  current = null;\n  currentId = 0;\n}\n\nfunction notify() {\n  let id = currentId;\n  currentId++;\n  return id;\n}\n\nconst defer = typeof Promise=='function' ? Promise.resolve().then.bind(Promise.resolve()) : setTimeout;\n\nfunction scheduler() {\n  let tasks = [];\n  let id;\n\n  function runTasks() {\n    id = null;\n    let t = tasks;\n    tasks = [];\n    for(var i = 0, len = t.length; i < len; i++) {\n      t[i]();\n    }\n  }\n\n  return function(task) {\n    tasks.push(task);\n    if(id == null) {\n      id = defer(runTasks);\n    }\n  };\n}\n\nconst read = scheduler();\nconst write = scheduler();\n\nclass Container {\n  constructor(renderer, frag, host) {\n    this.renderer = renderer;\n    this.frag = frag;\n    this.host = host || frag;\n    this[hookSymbol] = new Map();\n    this[phaseSymbol] = null;\n    this._updateQueued = false;\n  }\n\n  update() {\n    if(this._updateQueued) return;\n    read(() => {\n      let result = this.handlePhase(updateSymbol);\n      write(() => {\n        this.handlePhase(commitSymbol, result);\n\n        if(this[effectsSymbol]) {\n          write(() => {\n            this.handlePhase(effectsSymbol);\n          });\n        }\n      });\n      this._updateQueued = false;\n    });\n    this._updateQueued = true;\n  }\n\n  handlePhase(phase, arg) {\n    this[phaseSymbol] = phase;\n    switch(phase) {\n      case commitSymbol: return this.commit(arg);\n      case updateSymbol: return this.render();\n      case effectsSymbol: return this.runEffects(effectsSymbol);\n    }\n    this[phaseSymbol] = null;\n  }\n\n  commit(result) {\n    render(result, this.frag);\n    this.runEffects(commitSymbol);\n  }\n\n  render() {\n    setCurrent(this);\n    let result = this.args ?\n      this.renderer.apply(this.host, this.args) :\n      this.renderer.call(this.host, this.host);\n    clear();\n    return result;\n  }\n\n  runEffects(symbol) {\n    let effects = this[symbol];\n    if(effects) {\n      setCurrent(this);\n      for(let effect of effects) {\n        effect.call(this);\n      }\n      clear();\n    }\n  }\n\n  teardown() {\n    let hooks = this[hookSymbol];\n    hooks.forEach((hook) => {\n      if (typeof hook.teardown === 'function') {\n        hook.teardown();\n      }\n    });\n  }\n}\n\nfunction toCamelCase(val = '') {\n  return val.indexOf('-') === -1 ? val.toLowerCase() : val.toLowerCase().split('-').reduce((out, part) => {\n    return out ? out + part.charAt(0).toUpperCase() + part.slice(1) : part;\n  },'') \n}\n\nfunction component(renderer, BaseElement = HTMLElement, options = {useShadowDOM: true}) {\n  class Element extends BaseElement {\n    static get observedAttributes() {\n      return renderer.observedAttributes || [];\n    }\n\n    constructor() {\n      super();\n      if (options.useShadowDOM === false) {\n        this._container = new Container(renderer, this);\n      } else {\n        this.attachShadow({ mode: 'open' });\n        this._container = new Container(renderer, this.shadowRoot, this);        \n      }\n    }\n\n    connectedCallback() {\n      this._container.update();\n    }\n\n    disconnectedCallback() {\n      this._container.teardown();\n    }\n\n    attributeChangedCallback(name, _, newValue) {\n      let val = newValue === '' ? true : newValue;\n      Reflect.set(this, toCamelCase(name), val);\n    }\n  }\n  function reflectiveProp(initialValue) {\n    let value = initialValue;\n    return Object.freeze({\n      enumerable: true,\n      configurable: true,\n      get() {\n        return value;\n      },\n      set(newValue) {\n        value = newValue;\n        this._container.update();\n      }\n    })\n  }\n\n  const proto = new Proxy(BaseElement.prototype, {\n    set(target, key, value, receiver) {\n      if(key in target) {\n        Reflect.set(target, key, value);\n      }\n      let desc;\n      if(typeof key === 'symbol' || key[0] === '_') {\n        desc = {\n          enumerable: true,\n          configurable: true,\n          writable: true,\n          value\n        }; \n      } else {\n        desc = reflectiveProp(value);\n      }\n      Object.defineProperty(receiver, key, desc);\n\n      if(desc.set) {\n        desc.set.call(receiver, value);\n      }\n\n      return true;\n    }\n  });\n\n  Object.setPrototypeOf(Element.prototype, proto);\n\n\n  return Element;\n}\n\nclass Hook {\n  constructor(id, el) {\n    this.id = id;\n    this.el = el;\n  }\n}\n\nfunction use(Hook, ...args) {\n  let id = notify();\n  let hooks = current[hookSymbol];\n  \n  let hook = hooks.get(id);\n  if(!hook) {\n    hook = new Hook(id, current, ...args);\n    hooks.set(id, hook);\n  }\n\n  return hook.update(...args);\n}\n\nfunction hook(Hook) {\n  return use.bind(null, Hook);\n}\n\nconst useMemo = hook(class extends Hook {\n  constructor(id, el, fn, values) {\n    super(id, el);\n    this.value = fn();\n    this.values = values;\n  }\n\n  update(fn, values) {\n    if(this.hasChanged(values)) {\n      this.values = values;\n      this.value = fn();\n    }\n    return this.value;\n  }\n\n  hasChanged(values) {\n    return values.some((value, i) => this.values[i] !== value);\n  }\n});\n\nconst useCallback = (fn, inputs) => useMemo(() => fn, inputs);\n\nfunction setEffects(el, cb) {\n  if(!(effectsSymbol in el)) {\n    el[effectsSymbol] = [];\n  }\n  el[effectsSymbol].push(cb);\n}\n\nconst useEffect = hook(class extends Hook {\n  constructor(id, el) {\n    super(id, el);\n    this.values = false;\n    setEffects(el, this);\n  }\n\n  update(callback, values) {\n    this.callback = callback;\n    this.lastValues = this.values;\n    this.values = values;\n  }\n\n  call() {\n    if(this.values) {\n      if(this.hasChanged()) {\n        this.run();\n      }\n    } else {\n      this.run();\n    }\n  }\n\n  run() {\n    this.teardown();\n    this._teardown = this.callback.call(this.el);\n  }\n\n  teardown() {\n    if(this._teardown) {\n      this._teardown();\n    }\n  }\n\n  hasChanged() {\n    return this.lastValues === false || this.values.some((value, i) => this.lastValues[i] !== value);\n  }\n});\n\nconst useState = hook(class extends Hook {\n  constructor(id, el, initialValue) {\n    super(id, el);\n    this.updater = this.updater.bind(this);\n    this.makeArgs(initialValue);\n  }\n\n  update() {\n    return this.args;\n  }\n\n  updater(value) {\n    if (typeof value === \"function\") {\n      const updaterFn = value;\n      const [previousValue] = this.args;\n      value = updaterFn(previousValue);\n    }\n\n    this.makeArgs(value);\n    this.el.update();\n  }\n\n  makeArgs(value) {\n    this.args = Object.freeze([value, this.updater]);\n  }\n});\n\nconst useReducer = hook(class extends Hook {\n  constructor(id, el, _, initialState) {\n    super(id, el);\n    this.dispatch = this.dispatch.bind(this);\n    this.state = initialState;\n  }\n\n  update(reducer) {\n    this.reducer = reducer;\n    return [this.state, this.dispatch];\n  }\n\n  dispatch(action) {\n    this.state = this.reducer(this.state, action);\n    this.el.update();\n  }\n});\n\nclass DirectiveContainer extends Container {\n  constructor(renderer, part) {\n    super(renderer, part);\n    this.virtual = true;\n  }\n\n  commit(result) {\n    this.host.setValue(result);\n    this.host.commit();\n  }\n}\n\nconst map = new WeakMap();\n\nfunction withHooks(renderer) {\n  function factory(...args) {\n    return part => {\n      let cont = map.get(part);\n      if(!cont) {\n        cont = new DirectiveContainer(renderer, part);\n        map.set(part, cont);\n      }\n      cont.args = args;\n      cont.update();\n    };\n  }\n\n  return directive(factory);\n}\n\nfunction setContexts(el, consumer) {\n  if(!(contextSymbol in el)) {\n    el[contextSymbol] = [];\n  }\n  el[contextSymbol].push(consumer);\n}\n\nconst useContext = hook(class extends Hook {\n  constructor(id, el) {\n    super(id, el);\n    setContexts(el, this);\n    this._updater = this._updater.bind(this);\n  }\n\n  update(Context) {\n    if (this.el.virtual) {\n      throw new Error('can\\'t be used with virtual components');\n    }\n\n    if (this.Context !== Context) {\n      this._subscribe(Context);\n      this.Context = Context;\n    }\n\n    return this.value;\n  }\n\n  _updater(value) {\n    this.value = value;\n    this.el.update();\n  }\n\n  _subscribe(Context) {\n    const detail = { Context, callback: this._updater };\n\n    this.el.host.dispatchEvent(new CustomEvent(contextEvent, {\n      detail, // carrier\n      bubbles: true, // to bubble up in tree\n      cancelable: true, // to be able to cancel\n      composed: true, // to pass ShadowDOM boundaries\n    }));\n\n    const { unsubscribe, value } = detail;\n\n    this.value = unsubscribe ? value : Context.defaultValue;\n\n    this._unsubscribe = unsubscribe;\n  }\n\n  teardown() {\n    if (this._unsubscribe) {\n      this._unsubscribe();\n    }\n  }\n});\n\nconst createContext = (defaultValue) => {\n  const Context = {};\n  \n  Context.Provider = class extends HTMLElement {\n    constructor() {\n      super();\n      this.listeners = [];\n  \n      this.eventHandler = (event) => {\n        const { detail } = event;\n      \n        if (detail.Context === Context) {\n          detail.value = this.value;\n      \n          detail.unsubscribe = () => {\n            const index = this.listeners.indexOf(detail.callback);\n\n            if (index > -1) {\n              this.listeners.splice(index, 1);\n            }\n          };\n\n          this.listeners.push(detail.callback);\n  \n          event.stopPropagation();\n        }\n      };\n  \n      this.addEventListener(contextEvent, this.eventHandler);\n    }\n  \n    disconnectedCallback() {\n      this.removeEventListener(contextEvent, this.eventHandler);\n    }\n\n    set value(value) {\n      this._value = value;\n      this.listeners.forEach(callback => callback(value));\n    }\n\n    get value() {\n      return this._value;\n    }\n  };\n\n  Context.Consumer = component(function ({ render: render$$1 }) {\n    const context = useContext(Context);\n\n    return render$$1(context);\n  });\n\n  Context.defaultValue = defaultValue;\n\n  return Context;\n};\n\nexport { component, useCallback, useEffect, useState, useReducer, useMemo, withHooks, withHooks as virtual, useContext, createContext, hook, Hook };\n","/* eslint-disable */\n\nimport { component } from \"haunted-w-microtask\";\nimport { html } from \"lit-html\";\n\nconst MAX_DEPTH = 50;\n\nfunction RecursiveChild(el) {\n  const depth = Number(el.depth);\n  const { first, last } = el;\n\n  return html`\n    RAF: ${window.rafNum}\n    <div class=\"container\">\n      <label for=\"first\">First</label>\n      <input value=\"${first}\" type=\"text\" name=\"first\" />\n\n      <label for=\"last\">Last</label>\n      <input value=\"${last}\" type=\"text\" name=\"last\" />\n    </div>\n\n    <style>\n      .container {\n        border: none;\n        display: grid;\n        grid-template-columns: 20% 80%;\n      }\n\n      input {\n        border: 1px solid #e5e5e5;\n        padding: 6px 10px;\n        margin-bottom: 1em;\n      }\n    </style>\n\n    ${depth > MAX_DEPTH\n      ? html`\n          Total Time to Render: ${(Date.now() - window.renderStart) / 1000} seconds\n        `\n      : html`\n          <recursive-child\n            id=\"recursive-child-${depth + 1}\"\n            depth=\"${depth + 1}\"\n            first=\"${first}\"\n            last=\"${last}\"\n          ></recursive-child>\n        `}\n  `;\n}\n\nRecursiveChild.observedAttributes = [\"depth\", \"first\", \"last\"];\n\ncustomElements.define(\n  \"recursive-child\",\n  component(RecursiveChild, HTMLElement, {\n    useShadowDOM: false\n  })\n);\n","/* eslint-disable */\n\nimport { component, useReducer, html } from \"haunted-w-microtask\";\nimport \"./recursive-child-micro.ts\";\nimport \"./nested-children-test.scss\";\n\nlet logRafs = true;\nsetTimeout(() => {\n  logRafs = false;\n}, 1000);\n\nwindow.rafNum = 0;\nfunction countAnimationFrames() {\n  window.requestAnimationFrame(() => {\n    window.rafNum++;\n    if (logRafs) {\n      console.log(\"RAF: \" + window.rafNum);\n    }\n    countAnimationFrames();\n  });\n}\ncountAnimationFrames();\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"first\":\n      return {\n        ...state,\n        first: action.data\n      };\n    case \"last\":\n      return {\n        ...state,\n        last: action.data\n      };\n  }\n};\n\nfunction NestedChildrenTest(el) {\n  window.renderStart = Date.now();\n\n  const [{ first, last }, dispatch] = useReducer(reducer, {\n    first: \"happy\",\n    last: \"halloween\"\n  });\n\n  const onInput = ev => {\n    const target = ev.path[0]; //smell\n    dispatch({\n      type: target.name,\n      data: target.value\n    });\n  };\n\n  return html`\n    <h1>Scroll to bottom and update a field to see the time it takes to render</h1>\n\n    🎃RAF: ${window.rafNum}\n\n    <h3>${first} ${last}</h3>\n\n    <recursive-child\n      id=\"recursive-child-0\"\n      @input=\"${onInput}\"\n      depth=\"0\"\n      first=\"${first}\"\n      last=\"${last}\"\n    >\n    </recursive-child>\n  `;\n}\n\ncustomElements.define(\n  \"nested-children-test-micro\",\n  component(NestedChildrenTest, HTMLElement, {\n    useShadowDOM: false\n  })\n);\n"]}